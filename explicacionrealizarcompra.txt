
@login_required
def realizar_compra(request):
    carrito = Carrito.objects.all()  # Obtener todos los objetos del modelo Carrito
    cliente = Cliente.objects.all()  # Obtener todos los objetos del modelo Cliente
    saldo_tarjeta_url = 'http://127.0.0.1:8002/api/tarjetas/1/'  # URL de la API para obtener el saldo de la tarjeta
    url_api_pagos = 'http://127.0.0.1:8002/api/pagos/'  # URL de la API para realizar el pago
    url_api_starken = 'http://127.0.0.1:8080/api/starken/'  # URL de la API de Starken (reemplaza con la URL correcta)

    try:
        response = requests.get(saldo_tarjeta_url)  # Realizar una solicitud GET a la URL de la API de saldo de tarjeta
        if response.status_code == 200:
            saldo_tarjeta = response.json().get('saldo')  # Obtener el saldo de la tarjeta de la respuesta JSON
        else:
            error_message = f'Error al obtener el saldo de la tarjeta: {response.content.decode()}'
            messages.error(request, error_message)
            return redirect('lista_libros')
    except requests.exceptions.RequestException as e:
        error_message = f'Error al conectar con la API de tarjetas: {str(e)}'
        messages.error(request, error_message)
        return redirect('lista_libros')

    for item in carrito:  # Iterar sobre los objetos en el carrito
        libro = item.libro  # Obtener el libro del carrito
        libro.stock -= item.cantidad  # Actualizar el stock del libro
        libro.save()  # Guardar los cambios en el libro
        nombreProducto = item.libro.nombre
        cantidad = item.cantidad
        estado = 'pendiente'
        item_id = item.id

        for x in cliente:  # Obtener los datos del cliente para usarlos en la API de Starken
            nombre = x.nombre
            apellido = x.apellido
            direccion = x.direccion
            telefono = x.telefono
            numerodetarjeta = x.numero_tarjeta

        monto = sum(item.subtotal() for item in carrito)  # Calcular el monto total de la compra
        saldo_total = saldo_tarjeta - monto  # Calcular el saldo restante después de la compra

        if saldo_total < 0:
            error_message = 'Saldo insuficiente. No se puede realizar la compra.'
            messages.error(request, error_message)
            return redirect('lista_libros')

        if request.method == 'POST':
            total = sum(item.subtotal() for item in carrito)

            # Obtener el cliente y empleado de la base de datos
            cliente = Cliente.objects.first()
            empleado = Empleado.objects.first()

            with transaction.atomic():
                # Crear una nueva venta
                venta = Venta(
                    fecha_venta=date.today(),
                    total=total,
                    cliente=cliente,
                    empleado=empleado
                )
                venta.save()

                # Obtener el objeto Venta recién creado
                venta = Venta.objects.latest('id')

                # Crear un nuevo pago relacionado con la venta
                pago = Pago(
                    total=total,
                    venta=venta
                )
                pago.save()

        # Actualizar el saldo en la API de tarjetas
        data_tarjetas = {'id': 1, 'numerodetarjeta': numerodetarjeta, 'nombre': nombre, 'apellido': apellido, 'saldo': saldo_total}
        try:
            response_tarjetas = requests.put(saldo_tarjeta_url, json=data_tarjetas)  # Realizar una solicitud PUT a la API de saldo de tarjeta para actualizar el saldo
            if response_tarjetas.status_code != 200:
                error_message = f'Error al actualizar el saldo de la tarjeta: {response_tarjetas.content.decode()}'
                messages.error(request, error_message)
                return redirect('lista_libros')
        except requests.exceptions.RequestException as e:
            error_message = f'Error al conectar con la API de tarjetas: {str(e)}'
            messages.error(request, error_message)
            return redirect('lista_libros')

        # Agregar la compra a la API de pagos
        data_pagos = {'id': item_id, 'numerodetarjeta': numerodetarjeta, 'nombre': nombre, 'apellido': apellido, 'monto': monto, 'saldofinal': saldo_total}
        try:
            response_pagos = requests.post(url_api_pagos, json=data_pagos)  # Realizar una solicitud POST a la API de pagos para crear un nuevo objeto de pago
            if response_pagos.status_code == 201:
                # Agregar el producto a Starken solo si la compra fue realizada correctamente
                data_starken = {'id': item_id, 'nombre': nombre, 'apellido': apellido, 'direccion': direccion, 'telefono': telefono, 'nombreProducto': nombreProducto, 'cantidad': cantidad, 'estado': estado}
                response_starken = requests.post(url_api_starken, json=data_starken)  # Realizar una solicitud POST a la API de Starken para crear un nuevo objeto de producto

                if response_starken.status_code != 201:
                    error_message = f'Error al crear el objeto Producto en la API de Starken: {response_starken.content.decode()}'
                    messages.error(request, error_message)
            else:
                error_message = f'Error al crear el objeto Pago: {response_pagos.content.decode()}'
                messages.error(request, error_message)
                return redirect('lista_libros')
        except requests.exceptions.RequestException as e:
            error_message = f'Error al conectar con la API de pagos: {str(e)}'
            messages.error(request, error_message)
            return redirect('lista_libros')

    item.delete()  # Eliminar el objeto del carrito
    messages.success(request, 'Compra realizada exitosamente.')
    return redirect('lista_libros')



En resumen, el código realiza las siguientes acciones:

Requiere autenticación del usuario (@login_required).
Obtiene todos los objetos del modelo Carrito.
Obtiene todos los objetos del modelo Cliente.
Define las URLs de la API para obtener el saldo de la tarjeta, realizar el pago y agregar el producto a Starken.
Realiza una solicitud GET a la API de saldo de tarjeta para obtener el saldo actual.
Si la solicitud es exitosa, obtiene el saldo de la tarjeta de la respuesta JSON.
Si la solicitud no es exitosa, muestra un mensaje de error y redirige al usuario a la lista de libros.
Itera sobre los objetos en el carrito y realiza las siguientes acciones:
Actualiza el stock del libro.
Guarda los cambios en el libro.
Obtiene los datos del cliente.
Calcula el monto total de la compra y el saldo restante después de la compra.
Si se realiza una solicitud POST (es decir, se envía el formulario de compra):
Obtiene el total de la compra.
Obtiene el cliente y el empleado de la base de datos.
Crea una nueva venta y un nuevo pago relacionado con la venta.
Actualiza el saldo en la API de tarjetas mediante una solicitud PUT.
Agrega la compra a la API de pagos mediante una solicitud POST.
Si la solicitud es exitosa, agrega el producto a Starken mediante una solicitud POST.
Si la solicitud a Starken no es exitosa, muestra un mensaje de error.
Si la solicitud a la API de pagos no es exitosa, muestra un mensaje de error y redirige al usuario a la lista de libros.
Elimina el objeto del carrito.
Muestra un mensaje de éxito y redirige al usuario a la lista de libros.